import java.util.HashSet;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.Set;

// Clase principal que gestiona el monitoreo de CPU de servidores
public class MonitorCPU {
    public static void main(String[] args) {
        // Scanner para capturar la entrada del usuario desde consola
        Scanner scanner = new Scanner(System.in);

        // HashSet para guardar valores √∫nicos de consumo de CPU
        Set<Integer> registrosCPU = new HashSet<>();

        try {
            System.out.println("üñ•Ô∏è Ingresa consumos de CPU en porcentaje (enteros del 0 al 100). Escribe -1 para finalizar.");

            // Bucle para registrar m√∫ltiples valores
            while (true) {
                System.out.print("üî¢ CPU (%): ");

                // Captura de entrada del usuario
                int valor = scanner.nextInt();

                // Condici√≥n para finalizar la entrada
                if (valor == -1) {
                    break;
                }

                // Validaci√≥n de rango permitido
                if (valor < 0 || valor > 100) {
                    System.out.println("‚ùå Valor fuera de rango. Debe estar entre 0 y 100.");
                    continue;
                }

                // Verifica duplicados usando HashSet (add devuelve false si ya existe)
                if (!registrosCPU.add(valor)) {
                    System.out.println("‚ö†Ô∏è Valor duplicado: " + valor + "%");
                    continue;
                }

                // Si el valor supera el umbral cr√≠tico (95%), se lanza la excepci√≥n personalizada
                if (valor > 95) {
                    throw new ConsumoCriticoException("üö® ALERTA: Consumo cr√≠tico detectado (" + valor + "%)");
                }

                // Mensaje de confirmaci√≥n si el valor es v√°lido y aceptado
                System.out.println("‚úÖ Registro aceptado: " + valor + "%");
            }

            // Captura de errores cuando el usuario no ingresa un n√∫mero v√°lido
        } catch (InputMismatchException e) {
            System.out.println("‚ùå Error: Debes ingresar un n√∫mero entero v√°lido.");

            // Captura de excepci√≥n personalizada de consumo cr√≠tico
        } catch (ConsumoCriticoException e) {
            System.out.println(e.getMessage());

            // Captura de cualquier otra excepci√≥n no controlada
        } catch (Exception e) {
            System.out.println("‚ùå Error inesperado: " + e.getMessage());

            // Bloque finally siempre se ejecuta: se cierra el Scanner
        } finally {
            scanner.close();
            System.out.println("üì¶ Recursos cerrados correctamente.");
        }
    }
}